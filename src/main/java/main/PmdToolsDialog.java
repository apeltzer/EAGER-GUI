package main;

import IO.Communicator;
import IO.ReferenceFastAChooser;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class PmdToolsDialog extends JDialog {
    private JPanel contentPane;
    private JButton buttonOK;
    private JButton buttonCancel;
    private JCheckBox PMDSFilterCheckBox;
    private JTextField pmdsThreshold_field;
    private JTextField range_field;
    private JTextField pmdTools_advanced_parameters;
    private JLabel pmdsThreshold;
    private JLabel range;
    private JLabel adv_parameters;
    private JCheckBox calc_rangeCheckBox;
    private JButton selectMaskedFastaButton;
    private JTextPane IfCapturetextPane;


    public PmdToolsDialog(final Communicator communicator) {
        setValues(communicator);
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(buttonOK);


        buttonOK.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onOK(communicator);
            }
        });

        buttonCancel.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        });

        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

        // call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        }, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);


        PMDSFilterCheckBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (PMDSFilterCheckBox.isSelected()) {
                    pmdsThreshold_field.setEnabled(true);

                    if (communicator.isSnpcapturedata()) {
                        selectMaskedFastaButton.setEnabled(true);
                    }

                } else {
                    pmdsThreshold_field.setEnabled(false);
                    selectMaskedFastaButton.setEnabled(false);
                }
            }
        });

        calc_rangeCheckBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (calc_rangeCheckBox.isSelected()) {
                    range_field.setEnabled(true);
                } else {
                    range_field.setEnabled(false);
                }
            }
        });

        selectMaskedFastaButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                ReferenceFastAChooser rffqc = new ReferenceFastAChooser(communicator, ReferenceFastAChooser.REFERENCE_FASTA_MASKED_CAPTURE);
            }
        });

        selectMaskedFastaButton.setEnabled(PMDSFilterCheckBox.isEnabled() && communicator.isSnpcapturedata());
    }


    private void onOK(Communicator c) {
        c.setPmdtools_advanced(this.pmdTools_advanced_parameters.getText());
        c.setPMDSFilter(this.PMDSFilterCheckBox.isSelected());
        c.setPmdtoolsThreshold(this.pmdsThreshold_field.getText());
        c.setPmdtoolsCalcRange(this.calc_rangeCheckBox.isSelected());
        c.setCpGRange(this.range_field.getText());

        dispose();
    }

    private void onCancel() {
        // add your code here if necessary
        dispose();
    }


    private void setValues(Communicator c) {

        this.PMDSFilterCheckBox.setSelected(c.isPMDSFilter());
        this.calc_rangeCheckBox.setSelected(c.isPmdtoolsCalcRange());

        if (c.getPmdtoolsThreshold() != null) {
            this.pmdsThreshold_field.setText(c.getPmdtoolsThreshold());
        }

        if (c.getCpGRange() != null) {
            this.range_field.setText(c.getCpGRange());
        }

        if (c.getPmdtools_advanced() != null) {
            this.pmdTools_advanced_parameters.setText(c.getPmdtools_advanced());
        }

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1, true, false));
        panel1.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonOK = new JButton();
        buttonOK.setText("OK");
        panel2.add(buttonOK, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonCancel = new JButton();
        buttonCancel.setText("Cancel");
        panel2.add(buttonCancel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(9, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        PMDSFilterCheckBox = new JCheckBox();
        PMDSFilterCheckBox.setSelected(true);
        PMDSFilterCheckBox.setText("PMDS filter");
        PMDSFilterCheckBox.setToolTipText("Filter all reads lower the set threshold. The higher the PMDS, the higher the support for ancient DNA.");
        panel3.add(PMDSFilterCheckBox, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel3.add(spacer2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        pmdsThreshold = new JLabel();
        pmdsThreshold.setText("PMDS threshold");
        panel3.add(pmdsThreshold, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        range = new JLabel();
        range.setText("Range");
        panel3.add(range, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        pmdsThreshold_field = new JTextField();
        pmdsThreshold_field.setToolTipText("Specify PMDS threshold. Empirically measured value, change it only if you are know more about your data.");
        panel3.add(pmdsThreshold_field, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        range_field = new JTextField();
        range_field.setEnabled(false);
        range_field.setToolTipText("Number of bases from termini which are considered while CpG restriction.");
        panel3.add(range_field, new GridConstraints(6, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        adv_parameters = new JLabel();
        adv_parameters.setEnabled(true);
        adv_parameters.setText("Advanced parameters");
        panel3.add(adv_parameters, new GridConstraints(8, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        pmdTools_advanced_parameters = new JTextField();
        pmdTools_advanced_parameters.setEditable(true);
        pmdTools_advanced_parameters.setEnabled(true);
        panel3.add(pmdTools_advanced_parameters, new GridConstraints(8, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JSeparator separator1 = new JSeparator();
        panel3.add(separator1, new GridConstraints(7, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        calc_rangeCheckBox = new JCheckBox();
        calc_rangeCheckBox.setText("Calculate range");
        panel3.add(calc_rangeCheckBox, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JSeparator separator2 = new JSeparator();
        panel3.add(separator2, new GridConstraints(4, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Capture mask");
        panel3.add(label1, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        selectMaskedFastaButton = new JButton();
        selectMaskedFastaButton.setEnabled(false);
        selectMaskedFastaButton.setText("Select masked fasta");
        panel3.add(selectMaskedFastaButton, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        IfCapturetextPane = new JTextPane();
        IfCapturetextPane.setText("PMDS filtering will cause a bias towards the reference. You can prevent this for caputure experiments by using a fasta file that has the captured SNPs masked.");
        panel3.add(IfCapturetextPane, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
